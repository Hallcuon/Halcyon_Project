# Blueprint для розгортання Mapproject
services:
  # Сервіс бекенду (Django Web Service)
  - type: web
    name: mapproject-backend
    env: docker
    plan: free
    dockerContext: .
    dockerfilePath: ./Dockerfile
    healthCheckPath: /admin/login/
    envVars:
      - key: DATABASE_URL
        fromService:
          type: postgres
          name: postgres-db-managed
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis-channels
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: DEBUG
        value: false
      - key: ALLOWED_HOSTS
        value: .onrender.com
      - key: CORS_ALLOWED_ORIGINS
        value: https://your-frontend-site.onrender.com # Змініть на реальний URL фронтенду
      - key: CSRF_TRUSTED_ORIGINS
        value: https://your-frontend-site.onrender.com # Змініть на реальний URL фронтенду

  # Статичний сайт для фронтенду
  - type: static # Ось цей рядок
    name: mapproject-frontend
    rootDir: frontend
    plan: free
    buildCommand: "npm install && npm run build"
    staticPublishPath: ./frontend/dist
    envVars:
      - key: VITE_Maps_API_KEY
        sync: false
      - key: VITE_API_BASE_URL
        value: https://mapproject-backend.onrender.com

addons:
  # Managed PostgreSQL Database. Render handles backups, scaling, etc.
  - type: postgres
    name: postgres-db-managed
    databaseName: mapproject_db
    user: mapproject_user
    plan: free

  # Managed Redis instance for Channels (WebSocket message broker)
  - type: redis
    name: redis-channels
    plan: free
